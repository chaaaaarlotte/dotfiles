[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
  hook_post_update = '''
if dein#util#_is_windows()
  let cmd = 'tools\\update-dll-mingw'
elseif dein#util#_is_cygwin()
  let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
  let cmd = 'gmake'
  else
  let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
  '''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_post_update = '''
let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = 'let g:deoplete#enable_at_startup = 1'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'jacoborus/tender.vim'
hook_add = '''
syntax enable
colorscheme tender
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'jellybeans',
  \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'filename' ] ]
      \ },
  \ 'component_function': {
    \   'fugitive': 'LightLineFugitive',
    \   'readonly': 'LightLineReadonly',
    \   'modified': 'LightLineModified',
    \   'filename': 'LightLineFilename',
    \   'filetype': 'LightLineFiletype',
    \   'fileformat': 'LightLineFileformat',
    \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' }
  \ }

function! LightLineModified()
  if &filetype == "help"
  return ""
  elseif &modified
  return "+"
  elseif &modifiable
  return ""
  else
  return ""
  endif
  endfunction

function! LightLineReadonly()
  if &filetype == "help"
  return ""
  elseif &readonly
  return ""
  else
  return ""
  endif
  endfunction

function! LightLineFugitive()
  if exists("*fugitive#head")
let _ = fugitive#head()
  return strlen(_) ? ''._ : ''
  endif
  return ''
  endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
  \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
  \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  endfunction
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <silent><C-e> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
'''

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
'''

[[plugins]]
repo = 'zchee/deoplete-go'
build = 'make'
hook_add = '''
let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = ['./install.sh']
hook_add = '''
    let s:node = empty($XDG_CONFIG_HOME) ? expand('$HOME/.config') : $XDG_CONFIG_HOME
    let g:LanguageClient_serverCommands = {
        \ 'c': ['clangd', '-compile-commands-dir=' . getcwd() . '/build'],
        \ 'cpp': ['clangd', '-compile-commands-dir=' . getcwd() . '/build'],
    \ }
    " not stop completion $ & /
    set hidden
    set signcolumn=yes
    let g:LanguageClient_hoverPreview = "Never"
    nnoremap <F5> :call LanguageClient_contextMenu()<CR>
    " Or map each action separately
    nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
    nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
    nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
'''
